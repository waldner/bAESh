#!/bin/bash

declare -a AES_encrypt_sbox AES_decrypt_sbox
declare -a AES_gf_mult1 AES_gf_mult2 AES_gf_mult3 AES_gf_mult9
declare -a AES_gf_mult11 AES_gf_mult13 AES_gf_mult14
declare -a AES_rcon AES_mix_matrix AES_inv_mix_matrix

######### S-Boxes ##############################################
AES_encrypt_sbox=(
  99 124 119 123 242 107 111 197  48   1 103  43 254 215 171 118 
 202 130 201 125 250  89  71 240 173 212 162 175 156 164 114 192 
 183 253 147  38  54  63 247 204  52 165 229 241 113 216  49  21 
   4 199  35 195  24 150   5 154   7  18 128 226 235  39 178 117 
   9 131  44  26  27 110  90 160  82  59 214 179  41 227  47 132 
  83 209   0 237  32 252 177  91 106 203 190  57  74  76  88 207 
 208 239 170 251  67  77  51 133  69 249   2 127  80  60 159 168 
  81 163  64 143 146 157  56 245 188 182 218  33  16 255 243 210 
 205  12  19 236  95 151  68  23 196 167 126  61 100  93  25 115 
  96 129  79 220  34  42 144 136  70 238 184  20 222  94  11 219 
 224  50  58  10  73   6  36  92 194 211 172  98 145 149 228 121 
 231 200  55 109 141 213  78 169 108  86 244 234 101 122 174   8 
 186 120  37  46  28 166 180 198 232 221 116  31  75 189 139 138 
 112  62 181 102  72   3 246  14  97  53  87 185 134 193  29 158 
 225 248 152  17 105 217 142 148 155  30 135 233 206  85  40 223 
 140 161 137  13 191 230  66 104  65 153  45  15 176  84 187  22 
)

AES_decrypt_sbox=(
  82   9 106 213  48  54 165  56 191  64 163 158 129 243 215 251 
 124 227  57 130 155  47 255 135  52 142  67  68 196 222 233 203 
  84 123 148  50 166 194  35  61 238  76 149  11  66 250 195  78 
   8  46 161 102  40 217  36 178 118  91 162  73 109 139 209  37 
 114 248 246 100 134 104 152  22 212 164  92 204  93 101 182 146 
 108 112  72  80 253 237 185 218  94  21  70  87 167 141 157 132 
 144 216 171   0 140 188 211  10 247 228  88   5 184 179  69   6 
 208  44  30 143 202  63  15   2 193 175 189   3   1  19 138 107 
  58 145  17  65  79 103 220 234 151 242 207 206 240 180 230 115 
 150 172 116  34 231 173  53 133 226 249  55 232  28 117 223 110 
  71 241  26 113  29  41 197 137 111 183  98  14 170  24 190  27 
 252  86  62  75 198 210 121  32 154 219 192 254 120 205  90 244 
  31 221 168  51 136   7 199  49 177  18  16  89  39 128 236  95 
  96  81 127 169  25 181  74  13  45 229 122 159 147 201 156 239 
 160 224  59  77 174  42 245 176 200 235 187  60 131  83 153  97 
  23  43   4 126 186 119 214  38 225 105  20  99  85  33  12 125 
)

######### matrices for AES_mix_columns and AES_inv_mix_columns #########
AES_mix_matrix=(
 2 3 1 1
 1 2 3 1
 1 1 2 3
 3 1 1 2
)

AES_inv_mix_matrix=(
 14 11 13  9 
  9 14 11 13 
 13  9 14 11 
 11 13  9 14
)

######### lookup tables for GF multiplication ##################
AES_gf_mult1=(
   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 
  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31 
  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47 
  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63 
  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79 
  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95 
  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 
 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 
 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 
 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 
 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 
 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 
 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 
 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 
)

AES_gf_mult2=(
   0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30 
  32  34  36  38  40  42  44  46  48  50  52  54  56  58  60  62 
  64  66  68  70  72  74  76  78  80  82  84  86  88  90  92  94 
  96  98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 
 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 
 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 
 192 194 196 198 200 202 204 206 208 210 212 214 216 218 220 222 
 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252 254 
  27  25  31  29  19  17  23  21  11   9  15  13   3   1   7   5 
  59  57  63  61  51  49  55  53  43  41  47  45  35  33  39  37 
  91  89  95  93  83  81  87  85  75  73  79  77  67  65  71  69 
 123 121 127 125 115 113 119 117 107 105 111 109  99  97 103 101 
 155 153 159 157 147 145 151 149 139 137 143 141 131 129 135 133 
 187 185 191 189 179 177 183 181 171 169 175 173 163 161 167 165 
 219 217 223 221 211 209 215 213 203 201 207 205 195 193 199 197 
 251 249 255 253 243 241 247 245 235 233 239 237 227 225 231 229
)

AES_gf_mult3=(
   0   3   6   5  12  15  10   9  24  27  30  29  20  23  18  17 
  48  51  54  53  60  63  58  57  40  43  46  45  36  39  34  33 
  96  99 102 101 108 111 106 105 120 123 126 125 116 119 114 113 
  80  83  86  85  92  95  90  89  72  75  78  77  68  71  66  65 
 192 195 198 197 204 207 202 201 216 219 222 221 212 215 210 209 
 240 243 246 245 252 255 250 249 232 235 238 237 228 231 226 225 
 160 163 166 165 172 175 170 169 184 187 190 189 180 183 178 177 
 144 147 150 149 156 159 154 153 136 139 142 141 132 135 130 129 
 155 152 157 158 151 148 145 146 131 128 133 134 143 140 137 138 
 171 168 173 174 167 164 161 162 179 176 181 182 191 188 185 186 
 251 248 253 254 247 244 241 242 227 224 229 230 239 236 233 234 
 203 200 205 206 199 196 193 194 211 208 213 214 223 220 217 218 
  91  88  93  94  87  84  81  82  67  64  69  70  79  76  73  74 
 107 104 109 110 103 100  97  98 115 112 117 118 127 124 121 122 
  59  56  61  62  55  52  49  50  35  32  37  38  47  44  41  42 
  11   8  13  14   7   4   1   2  19  16  21  22  31  28  25  26
)

AES_gf_mult9=(
   0   9  18  27  36  45  54  63  72  65  90  83 108 101 126 119 
 144 153 130 139 180 189 166 175 216 209 202 195 252 245 238 231 
  59  50  41  32  31  22  13   4 115 122  97 104  87  94  69  76 
 171 162 185 176 143 134 157 148 227 234 241 248 199 206 213 220 
 118 127 100 109  82  91  64  73  62  55  44  37  26  19   8   1 
 230 239 244 253 194 203 208 217 174 167 188 181 138 131 152 145 
  77  68  95  86 105  96 123 114   5  12  23  30  33  40  51  58 
 221 212 207 198 249 240 235 226 149 156 135 142 177 184 163 170 
 236 229 254 247 200 193 218 211 164 173 182 191 128 137 146 155 
 124 117 110 103  88  81  74  67  52  61  38  47  16  25   2  11 
 215 222 197 204 243 250 225 232 159 150 141 132 187 178 169 160 
  71  78  85  92  99 106 113 120  15   6  29  20  43  34  57  48 
 154 147 136 129 190 183 172 165 210 219 192 201 246 255 228 237 
  10   3  24  17  46  39  60  53  66  75  80  89 102 111 116 125 
 161 168 179 186 133 140 151 158 233 224 251 242 205 196 223 214 
  49  56  35  42  21  28   7  14 121 112 107  98  93  84  79  70
)

AES_gf_mult11=(
   0  11  22  29  44  39  58  49  88  83  78  69 116 127  98 105 
 176 187 166 173 156 151 138 129 232 227 254 245 196 207 210 217 
 123 112 109 102  87  92  65  74  35  40  53  62  15   4  25  18 
 203 192 221 214 231 236 241 250 147 152 133 142 191 180 169 162 
 246 253 224 235 218 209 204 199 174 165 184 179 130 137 148 159 
  70  77  80  91 106  97 124 119  30  21   8   3  50  57  36  47 
 141 134 155 144 161 170 183 188 213 222 195 200 249 242 239 228 
  61  54  43  32  17  26   7  12 101 110 115 120  73  66  95  84 
 247 252 225 234 219 208 205 198 175 164 185 178 131 136 149 158 
  71  76  81  90 107  96 125 118  31  20   9   2  51  56  37  46 
 140 135 154 145 160 171 182 189 212 223 194 201 248 243 238 229 
  60  55  42  33  16  27   6  13 100 111 114 121  72  67  94  85 
   1  10  23  28  45  38  59  48  89  82  79  68 117 126  99 104 
 177 186 167 172 157 150 139 128 233 226 255 244 197 206 211 216 
 122 113 108 103  86  93  64  75  34  41  52  63  14   5  24  19 
 202 193 220 215 230 237 240 251 146 153 132 143 190 181 168 163 
)

AES_gf_mult13=(
   0  13  26  23  52  57  46  35 104 101 114 127  92  81  70  75 
 208 221 202 199 228 233 254 243 184 181 162 175 140 129 150 155 
 187 182 161 172 143 130 149 152 211 222 201 196 231 234 253 240 
 107 102 113 124  95  82  69  72   3  14  25  20  55  58  45  32 
 109  96 119 122  89  84  67  78   5   8  31  18  49  60  43  38 
 189 176 167 170 137 132 147 158 213 216 207 194 225 236 251 246 
 214 219 204 193 226 239 248 245 190 179 164 169 138 135 144 157 
   6  11  28  17  50  63  40  37 110  99 116 121  90  87  64  77 
 218 215 192 205 238 227 244 249 178 191 168 165 134 139 156 145 
  10   7  16  29  62  51  36  41  98 111 120 117  86  91  76  65 
  97 108 123 118  85  88  79  66   9   4  19  30  61  48  39  42 
 177 188 171 166 133 136 159 146 217 212 195 206 237 224 247 250 
 183 186 173 160 131 142 153 148 223 210 197 200 235 230 241 252 
 103 106 125 112  83  94  73  68  15   2  21  24  59  54  33  44 
  12   1  22  27  56  53  34  47 100 105 126 115  80  93  74  71 
 220 209 198 203 232 229 242 255 180 185 174 163 128 141 154 151 
)

AES_gf_mult14=(
   0  14  28  18  56  54  36  42 112 126 108  98  72  70  84  90 
 224 238 252 242 216 214 196 202 144 158 140 130 168 166 180 186 
 219 213 199 201 227 237 255 241 171 165 183 185 147 157 143 129 
  59  53  39  41   3  13  31  17  75  69  87  89 115 125 111  97 
 173 163 177 191 149 155 137 135 221 211 193 207 229 235 249 247 
  77  67  81  95 117 123 105 103  61  51  33  47   5  11  25  23 
 118 120 106 100  78  64  82  92   6   8  26  20  62  48  34  44 
 150 152 138 132 174 160 178 188 230 232 250 244 222 208 194 204 
  65  79  93  83 121 119 101 107  49  63  45  35   9   7  21  27 
 161 175 189 179 153 151 133 139 209 223 205 195 233 231 245 251 
 154 148 134 136 162 172 190 176 234 228 246 248 210 220 206 192 
 122 116 102 104  66  76  94  80  10   4  22  24  50  60  46  32 
 236 226 240 254 212 218 200 198 156 146 128 142 164 170 184 182 
  12   2  16  30  52  58  40  38 124 114  96 110  68  74  88  86 
  55  57  43  37  15   1  19  29  71  73  91  85 127 113  99 109 
 215 217 203 197 239 225 243 253 167 169 187 181 159 145 131 141
)

# simulate multidimension with indirection
declare -A AES_gf_mult

for n in 1 2 3 9 11 13 14; do
  AES_gf_mult[$n]="AES_gf_mult${n}"
done

######### rcon values for key expansion ########################
# not all values are used, those below are more than enough
AES_rcon=(
 141   1   2   4   8  16  32  64 128  27  54 108 216 171  77 154
)

######### General global variables and constants ###############

declare -a AES_state
declare -a AES_input
declare -a AES_previous_state
declare -a AES_key
declare -a AES_iv
declare -a AES_round_keys

AES_block_size=16

# used only for base64 output
declare -a AES_base64_table
AES_base64_table=( A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
                   a b c d e f g h i j k l m n o p q r s t u v w x y z
                   0 1 2 3 4 5 6 7 8 9 + / )

AES_base64_left=0
AES_base64_index=0
AES_base64_columns=64
AES_base64_cur_columns=0

################################################################
####### UTILITY/AUXILIARY FUNCTIONS ############################
################################################################

AES_show_help(){
  {
    echo "Usage: $0 -K <key> [ -I <IV> ] [ -m ecb|cbc|cfb|ofb ] [ -b 128|192|256 ] [ -o raw|hex|base64 ] [ -d ] [ -x ] [ -h ]"
    echo 
    echo "-K <key>     key to use for encryption. Mandatory. Must be a hexadecimal string (eg"
    echo "             '03a2b8ef888a901193a2000f883a9ff1' for 128 bit). If an explicit length"
    echo "             is not specified with -b, will be padded with zeros to the nearest key size."
    echo "             If an explicit length *is* specified with -b, the key will be forced to that"
    echo "             length (padded with zeros or truncated, as needed)."
    echo "-I <iv>      Initialization vector to use (for modes other than ecb). Must be a hexadecimal"
    echo "             string. Will be padded with zeros if shorter than 16 bytes."
    echo "-m <mode>    Cipher block mode to use. Supported modes are 'ebc', 'cbc', 'cfb', 'ofb' and 'ctr'."
    echo "             Default: 'cbc'."
    echo "-b <bits>    Key length. If specified, must be one of 128, 192 or 256. If not specified, it's"
    echo "             deduced from the length of the key given with -K, with a minimum of 128 and a maximum of 256."
    echo "-o <format>  Output format. Must be one of 'raw', 'hex' or 'base64'. Default: 'raw'."
    echo "-d           Decrypt rather than encrypting."
    echo "-x           Only perform key expansion and print the expanded key."
    echo "-h           Show this help."
    echo 
    echo "EXAMPLES"
    echo
    echo "$0 -K '38742984797292987837878abf736aff' -I '12345678909876543212345678909876' -m cfb < file1.plain > file1.encrypted"
    echo "$0 -d -K 'abc7192840000000111122aaaaaaaa09' -I '00' < file2.encrypted > file2.plain"
  } >&2
}

AES_log(){
  printf '%s\n' "$1" >&2
}

AES_die(){
  AES_log "$1"
  exit 1
}

AES_base64_print(){
  local char=$1
  printf '%s' "$char"
  ((AES_base64_cur_columns++))
  if [ $AES_base64_cur_columns -ge $AES_base64_columns ]; then
    printf '\n'
    AES_base64_cur_columns=0
  fi
}

# outputs elements of array up to "$last" in base64 format
# "streaming" base64 in bash. Really.
AES_output_base64(){

  local i
  local -n array=$1
  local last=$2

  for ((i = 0; i < $last; i++)); do
    if [ $AES_base64_index -eq 0 ]; then
      AES_base64_print "${AES_base64_table[${array[i]} >> 2]}"
      AES_base64_left=$(( (${array[i]} & 3) << 4))
    elif [ $AES_base64_index -eq 1 ]; then
      AES_base64_print "${AES_base64_table[$AES_base64_left + (${array[i]} >> 4)]}"
      AES_base64_left=$(( (${array[i]} & 15) << 2 ))
    elif [ $AES_base64_index -eq 2 ]; then
      AES_base64_print "${AES_base64_table[$AES_base64_left + (${array[i]} >> 6)]}"
      AES_base64_print "${AES_base64_table[${array[i]} & 63]}"
      AES_base64_left=0
    fi

    # we must maintain state between calls
    AES_base64_index=$(( (AES_base64_index + 1) % 3))

  done
}

AES_output_base64_finalize(){

  if [ $AES_base64_index -eq 1 ]; then
    AES_base64_print "${AES_base64_table[$AES_base64_left]}"
    AES_base64_print "="
    AES_base64_print "="
  elif [ $AES_base64_index -eq 2 ]; then
    AES_base64_print "${AES_base64_table[$AES_base64_left]}"
    AES_base64_print "="
  fi

  if [ $AES_base64_cur_columns -ne 0 ]; then
    printf '\n'
  fi
}

AES_do_xor(){
  local i

  local -n array1=$1
  local -n array2=$2

  for ((i = 0; i < $AES_block_size; i++)); do
    array1[i]=$(( array1[i] ^ array2[i] ))
  done
}

# Read a block of input
AES_read_input(){

  local data length bytes status
  local fd=$1

  bytes=0

  local to_read=$AES_block_size   # 16, regardless of bits

  AES_eof=0

  while true; do

    IFS= read -u $fd -d '' -r -n $to_read data
    status=$?

    length=${#data}

    for ((i=0; i < length; i++)); do
      printf -v "AES_input[bytes+i]" "%d" "'${data:i:1}"
    done

    # if we read less than we wanted, and it's not EOF, it means we also have
    # a delimiter (NUL)
    if [ $length -lt $to_read ] && [ $status -eq 0 ]; then
      AES_input[bytes+length]=0
      ((length++))
      #echo "Read NUL"
    fi

    ((bytes+=length))
    if [ $bytes -ge $AES_block_size ]; then
      break
    fi
    if [ $status -ne 0 ]; then
      break
    fi
    ((to_read-=length))
  done

  # Padding, PKCS#7: if n bytes are missing, set them all to n
  # Always add padding. The caller will process/remove/ignore as appropriate
  if [ $status -ne 0 ]; then
    AES_eof=1
    local missing=$(( AES_block_size - bytes ))
    for (( 1 ; bytes < AES_block_size; bytes++ )); do
      AES_input[bytes]=$missing
    done
  fi
}

# given a hex string like "01ab340f99", splits
# it and puts the individual bytes in an array
AES_create_iv_or_key(){

  local iv_or_keyx=$1 i
  local -n array=$2

  array=()
  for ((i = 0; i < ${#iv_or_keyx} / 2; i++)); do
    array[i]=$(( 16#${iv_or_keyx:i*2:2} ))
  done
}

# outputs elements of array up to "$last" in raw format
AES_output_raw(){
  local -n array=$1
  local last=$2

  if [ $last -gt 0 ]; then
    printf "$(printf '\\x%x' "${array[@]:0:$last}")"
  fi
}

# outputs elements of array up to "$last" in hex format
AES_output_hex(){
  local -n array=$1
  local last=$2

  if [ $last -gt 0 ]; then
    printf '%02x' "${array[@]:0:$last}"
    printf '\n'
  fi
}

# Guess what this does.
AES_print_expanded_key(){
  local i

  for ((i = 0; i < $AES_rounds + 1; i++)); do
    printf '%02x' "${AES_round_keys[$i*$AES_block_size]}"
    printf ' %02x' "${AES_round_keys[@]:$i*$AES_block_size+1:$AES_block_size-1}"
    printf '\n'
  done
  
}

# copy array src into dst
AES_copy_array(){
  local -n src=$1
  local -n dst=$2

  local i

  for ((i = 0; i < 16; i++)); do
    dst[$i]=${src[$i]}
  done
 
}

AES_init(){

  local hex_key=$1
  local key_length

  # check key length
  key_length=$(( ${#hex_key} / 2 ))

  # if no explicit key bits given, derive them from the key length
  if ( [ $key_length -lt 16 ] && [ $AES_key_bits -eq 0 ] ) || ( [ $key_length -ne 16 ] && [ $AES_key_bits -eq 128 ] ); then
    # use 128 bits, expand key with zeros
    AES_log "Warning: forcing key length to 128 bits"
    hex_key="${hex_key}00000000000000000000000000000000"
    hex_key=${hex_key:0:32}
  elif ( [ $key_length -gt 16 ] && [ $key_length -lt 24 ] && [ $AES_key_bits -eq 0 ] ) || ( [ $key_length -ne 24 ] && [ $AES_key_bits -eq 192 ] ); then
    # use 192 bits, expand key with zeros
    AES_log "Warning: forcing key length to 192 bits"
    hex_key="${hex_key}000000000000000000000000000000000000000000000000"
    hex_key=${hex_key:0:48}
  elif ( [ $key_length -gt 24 ] && [ $AES_key_bits -eq 0 ]) || ( [ $key_length -ne 32 ] && [ $AES_key_bits -eq 256 ] ); then
    # use 256 bits, expand key with zeros
    AES_log "Warning: forcing key length to 256 bits"
    hex_key="${hex_key}0000000000000000000000000000000000000000000000000000000000000000"
    hex_key=${hex_key:0:64}
  fi

  AES_key_bits=$(( (${#hex_key} / 2) * 8 ))
  AES_key_bytes=$(( AES_key_bits / 8 ))

  if [ $AES_key_bits -eq 128 ]; then
    AES_rounds=10
    AES_expanded_key_bytes=176
  elif [ $AES_key_bits -eq 192 ]; then
    AES_rounds=12
    AES_expanded_key_bytes=208
  else
    AES_rounds=14
    AES_expanded_key_bytes=240
  fi

  AES_create_iv_or_key $hex_key AES_key

  AES_expand_key

  AES_pre_encrypt_function=AES_pre_encrypt_${AES_mode}
  AES_pre_decrypt_function=AES_pre_decrypt_${AES_mode}
  AES_encrypt_function=AES_encrypt_${AES_mode}
  AES_decrypt_function=AES_decrypt_${AES_mode}

}


################################################################
####### VARIOUS OPERATION MODES IMPLEMENTATION #################
################################################################

####### ECB ####################################################

AES_pre_encrypt_ecb(){
  # Do nothing, no preparation needed for ecb mode
  :
}

AES_pre_decrypt_ecb(){
  # Do nothing, no preparation needed for ecb mode
  :
}

AES_encrypt_ecb(){

  local fd=0

  while true; do
    AES_read_input $fd
    AES_copy_array AES_input AES_state
    AES_encrypt_block
    $AES_output_function AES_state 16
    if [ $AES_eof -eq 1 ]; then
      break
    fi
  done

  if [ $AES_output_format = "base64" ]; then
    AES_output_base64_finalize   # this needs no args
  fi
}

AES_decrypt_ecb(){

  local fd=0
  local cycle=0
  local last missing

  while true; do
    AES_read_input $fd
    if [ $AES_eof -eq 1 ]; then
      # remove padding before printing last good state
      missing=${AES_previous_state[15]}   # eg 3, so we have to print from 0 to 12
      last=$(( 16 - missing ))      
      $AES_output_function AES_previous_state $last
      break
    elif [ $cycle -gt 0 ]; then      
      $AES_output_function AES_previous_state 16
    fi

    AES_copy_array AES_input AES_state
    AES_decrypt_block

    AES_copy_array AES_state AES_previous_state
    ((cycle++))
  done

  if [ $AES_output_format = "base64" ]; then
    AES_output_base64_finalize   # this needs no args
  fi

}

####### CBC ####################################################

AES_pre_encrypt_cbc(){

  # prepopulate the "previous encrypted block" with the IV
  AES_state=()
  AES_copy_array AES_iv AES_state
}

AES_pre_decrypt_cbc(){

  # prepopulate the state with the IV
  AES_previous_ciphertext=()
  AES_copy_array AES_iv AES_previous_ciphertext
}


AES_encrypt_cbc(){

  local fd=0

  while true; do
    AES_read_input $fd
    AES_do_xor AES_input AES_state
    AES_copy_array AES_input AES_state
    AES_encrypt_block
    $AES_output_function AES_state 16
    if [ $AES_eof -eq 1 ]; then
      break
    fi
  done

  if [ $AES_output_format = "base64" ]; then
    AES_output_base64_finalize   # this needs no args
  fi
}

AES_decrypt_cbc(){

  local fd=0
  local cycle=0
  local last missing

  while true; do
    AES_read_input $fd
    if [ $AES_eof -eq 1 ]; then
      # remove padding before printing last state
      missing=${AES_previous_state[15]}   # eg 3, so we have to print from 0 to 12
      last=$(( 16 - missing ))      
      $AES_output_function AES_previous_state $last
      break
    elif [ $cycle -gt 0 ]; then      
      $AES_output_function AES_previous_state 16
    fi

    AES_copy_array AES_input AES_state
    AES_decrypt_block

    AES_do_xor AES_state AES_previous_ciphertext
    AES_copy_array AES_input AES_previous_ciphertext
    AES_copy_array AES_state AES_previous_state
    ((cycle++))

  done

  if [ $AES_output_format = "base64" ]; then
    AES_output_base64_finalize   # this needs no args
  fi
}

####### CFB ####################################################

AES_pre_encrypt_cfb(){
  # prepopulate the "previous encrypted block" with the IV
  AES_state=()
  AES_copy_array AES_iv AES_state
}

AES_pre_decrypt_cfb(){
  # prepopulate the "previous encrypted block" with the IV
  AES_state=()
  AES_copy_array AES_iv AES_state
}

AES_encrypt_cfb(){
  local fd=0 last missing

  while true; do

    AES_encrypt_block 

    AES_read_input $fd

    last=16
    if [ $AES_eof -eq 1 ]; then
      # see where padding is, to use later
      missing=${AES_input[15]}   # eg 3, so we have to print from 0 to 12
      last=$(( 16 - missing ))
    fi
 
    AES_do_xor AES_state AES_input

    $AES_output_function AES_state $last

    if [ $AES_eof -eq 1 ]; then
      break
    fi
  done

  if [ $AES_output_format = "base64" ]; then
    AES_output_base64_finalize   # this needs no args
  fi
}

AES_decrypt_cfb(){

  local fd=0 last missing

  while true; do

    AES_encrypt_block             # yes, encrypt even if decrypting 
    AES_read_input $fd                # ciphertext

    last=16
    if [ $AES_eof -eq 1 ]; then
      # see where padding is, to remove it later
      missing=${AES_input[15]}   # eg 3, so we have to print from 0 to 12
      last=$(( 16 - missing ))
    fi
 
    AES_do_xor AES_state AES_input

    $AES_output_function AES_state $last
    if [ $AES_eof -eq 1 ]; then
      break
    fi

    AES_copy_array AES_input AES_state

  done

  if [ $AES_output_format = "base64" ]; then
    AES_output_base64_finalize   # this needs no args
  fi

}

####### OFB ####################################################

AES_pre_encrypt_ofb(){
  # prepopulate the "previous encrypted block" with the IV
  AES_state=()
  AES_copy_array AES_iv AES_state
}

AES_pre_decrypt_ofb(){
  # prepopulate the "previous encrypted block" with the IV
  AES_state=()
  AES_copy_array AES_iv AES_state
}

AES_encrypt_ofb(){

  local fd=0 last missing
  AES_previous_ciphertext=()

  while true; do
    AES_encrypt_block 
    AES_copy_array AES_state AES_previous_ciphertext
    AES_read_input $fd

    last=16
    if [ $AES_eof -eq 1 ]; then
      # see where padding is
      missing=${AES_input[15]}   # eg 3, so we have to print from 0 to 12
      last=$(( 16 - missing ))
    fi
 
    AES_do_xor AES_state AES_input

    $AES_output_function AES_state $last
    if [ $AES_eof -eq 1 ]; then
      break
    fi

    AES_copy_array AES_previous_ciphertext AES_state

  done

  if [ $AES_output_format = "base64" ]; then
    AES_output_base64_finalize   # this needs no args
  fi
}

AES_decrypt_ofb(){

  AES_encrypt_ofb    # :-)
  return
}

####### CTR ####################################################

# increments the counter (IV) 
AES_increment_counter(){
  local i

  for ((i = $AES_block_size - 1; i >= 0; i--)); do

    ((AES_iv[i]++))

    if [ ${AES_iv[$i]} -le 255 ]; then
      break
    fi

    AES_iv[i]=0    

  done
}

AES_pre_encrypt_ctr(){
  : # nothing to do
}

AES_pre_decrypt_ctr(){
  : # nothing to do
}

AES_encrypt_ctr(){

  local fd=0 last missing
  AES_previous_ciphertext=()

  while true; do

    # copy IV (counter) to state
    AES_copy_array AES_iv AES_state

    AES_encrypt_block 

    AES_read_input $fd

    last=16
    if [ $AES_eof -eq 1 ]; then
      # see where padding is
      missing=${AES_input[15]}   # eg 3, so we have to print from 0 to 12
      last=$(( 16 - missing ))
    fi
 
    AES_do_xor AES_state AES_input

    $AES_output_function AES_state $last
    if [ $AES_eof -eq 1 ]; then
      break
    fi


    AES_increment_counter

  done

  if [ $AES_output_format = "base64" ]; then
    AES_output_base64_finalize   # this needs no args
  fi
}

AES_decrypt_ctr(){

  AES_encrypt_ctr    # :-)
  return
}


################################################################
####### PROPER AES ENCRYPTION/DECRYPTION ROUTINES ##############
################################################################

AES_sub_bytes_word(){
  local i byte row col
  local start=$1
  local end=$((start + 4))

  local -n array=$2

  for ((i = start; i < end; i++)); do
    byte=${array[$i]}

    #printf 'substituting byte %02x\n' $byte

    row=$(( (byte >> 4) & 16#f ))
    col=$(( byte & 16#f ))
    pos=$(( row * 16 + col ))
    array[$i]=${AES_encrypt_sbox[$pos]}
  done
}

AES_inv_sub_bytes_word(){
  local i byte row col
  local start=$1
  local end=$((start+4))
  local -n array=$2
  for ((i = start; i < end; i++)); do
    byte=${array[$i]}
    row=$(( (byte >> 4) & 16#f ))
    col=$(( byte & 16#f ))
    pos=$(( row * 16 + col ))
    array[$i]=${AES_decrypt_sbox[$pos]}
  done
}

AES_sub_bytes(){
  local i 
  for ((i = 0; i < 4; i++)); do
    #echo "row $i"
    #dump_state
    AES_sub_bytes_word $((i*4)) AES_state
  done

}

AES_inv_sub_bytes(){
  local i 
  for ((i = 0; i < 4; i++)); do
    AES_inv_sub_bytes_word $((i*4)) AES_state
  done
}

AES_shift_rows(){

  local temp

  # row 0 not touched

  # shift row 1
  temp=${AES_state[1]}
  AES_state[1]=${AES_state[5]}
  AES_state[5]=${AES_state[9]}
  AES_state[9]=${AES_state[13]}
  AES_state[13]=${temp}

  # shift row 2
  temp=${AES_state[2]}
  AES_state[2]=${AES_state[10]}
  AES_state[10]=$temp
  temp=${AES_state[6]}
  AES_state[6]=${AES_state[14]}
  AES_state[14]=$temp

  # shift row 3 -  this is like a right shift of 1
  temp=${AES_state[15]}
  AES_state[15]=${AES_state[11]}
  AES_state[11]=${AES_state[7]}
  AES_state[7]=${AES_state[3]}
  AES_state[3]=${temp}
}

AES_inv_shift_rows(){

  local temp

  # row 0 not touched

  # shift row 1
  temp=${AES_state[13]}
  AES_state[13]=${AES_state[9]}
  AES_state[9]=${AES_state[5]}
  AES_state[5]=${AES_state[1]}
  AES_state[1]=${temp}

  # shift row 2
  temp=${AES_state[2]}
  AES_state[2]=${AES_state[10]}
  AES_state[10]=$temp
  temp=${AES_state[6]}
  AES_state[6]=${AES_state[14]}
  AES_state[14]=$temp

  # shift row 3 -  this is like a left shift of 1
  temp=${AES_state[3]}
  AES_state[3]=${AES_state[7]}
  AES_state[7]=${AES_state[11]}
  AES_state[11]=${AES_state[15]}
  AES_state[15]=${temp}
}

AES_mix_columns(){

  local column row
  local -a new_col

  for ((column = 0; column < 4; column ++)); do
     
    for ((row = 0; row < 4; row++)); do

      # this sucks even for bash, ideally it should be possible to do ${!${AES_gf_mult[n]}[x]}
      local -n a0=${AES_gf_mult[${AES_mix_matrix[row*4+0]}]}
      local -n a1=${AES_gf_mult[${AES_mix_matrix[row*4+1]}]}
      local -n a2=${AES_gf_mult[${AES_mix_matrix[row*4+2]}]}
      local -n a3=${AES_gf_mult[${AES_mix_matrix[row*4+3]}]}
       
      new_col[row]=$(( a0[AES_state[column*4]] ^ a1[AES_state[column*4+1]] ^ a2[AES_state[column*4+2]] ^ a3[AES_state[column*4+3]] ))
    done

    # replace column in state with new values
    for ((row = 0; row < 4; row++ )); do
      AES_state[(column*4)+row]=${new_col[row]}
    done
  done

}

AES_inv_mix_columns(){

  local column row
  local -a new_col

  for ((column = 0; column < 4; column ++)); do
     
    for ((row = 0; row < 4; row++)); do

      # this sucks even for bash, ideally it should be possible to do ${!${AES_gf_mult[n]}[x]}
      local -n a0=${AES_gf_mult[${AES_inv_mix_matrix[row*4+0]}]}
      local -n a1=${AES_gf_mult[${AES_inv_mix_matrix[row*4+1]}]}
      local -n a2=${AES_gf_mult[${AES_inv_mix_matrix[row*4+2]}]}
      local -n a3=${AES_gf_mult[${AES_inv_mix_matrix[row*4+3]}]}
       
      new_col[row]=$(( a0[AES_state[column*4]] ^ a1[AES_state[column*4+1]] ^ a2[AES_state[column*4+2]] ^ a3[AES_state[column*4+3]] ))
    done

    # replace column in state with new values
    for ((row = 0; row < 4; row++ )); do
      AES_state[(column*4)+row]=${new_col[row]}
    done
  done

}

AES_add_round_key(){

  local i round=$1

  for ((i = 0; i < $AES_block_size; i++)); do
    AES_state[i]=$(( AES_state[i] ^ AES_round_keys[round * $AES_block_size + i] ))
  done

}

AES_encrypt_block(){

  local round
  # state is in AES_state()
  AES_add_round_key 0
  for ((round = 1; round <= $AES_rounds; round++)); do
    AES_sub_bytes
    AES_shift_rows
    if [ $round -lt $AES_rounds ]; then
      AES_mix_columns
    fi
    AES_add_round_key $round
  done

}


AES_decrypt_block(){
  local round
  AES_add_round_key $AES_rounds
  for ((round = $AES_rounds - 1; round >= 0; round-- )); do
    AES_inv_shift_rows
    AES_inv_sub_bytes 
    AES_add_round_key $round
    if [ $round -gt 0 ]; then
      AES_inv_mix_columns
    fi
  done
}

AES_expand_key(){

  local i cur_expanded_key_bytes core_count temp
  local -a t

  AES_round_keys=()  

  # first $AES_key_bytes bytes of expansion is the key itself

  for ((i = 0; i < $AES_key_bytes; i++ )); do
    AES_round_keys[i]=${AES_key[$i]}
  done

  cur_expanded_key_bytes=$AES_key_bytes
  core_count=1

  # We need 11, 13 or 15 sets of sixteen bytes each for
  # 128, 192 and 265-bit mode respectively
  while [ $cur_expanded_key_bytes -lt $AES_expanded_key_bytes ]; do

    t[0]=${AES_round_keys[cur_expanded_key_bytes-4]}
    t[1]=${AES_round_keys[cur_expanded_key_bytes-3]}
    t[2]=${AES_round_keys[cur_expanded_key_bytes-2]}
    t[3]=${AES_round_keys[cur_expanded_key_bytes-1]}

    if [ $(( cur_expanded_key_bytes % AES_key_bytes )) -eq 0 ]; then

      # "core processing"

      # rotate left
      temp=${t[0]}
      t[0]=${t[1]}
      t[1]=${t[2]}
      t[2]=${t[3]}
      t[3]=${temp}

      AES_sub_bytes_word 0 t
 
      t[0]=$(( t[0] ^ AES_rcon[core_count] ))

      ((core_count++))
    fi

    if [ $AES_key_bits -eq 256 ] && [ $(( cur_expanded_key_bytes % AES_key_bytes )) -eq 16 ]; then
      AES_sub_bytes_word 0 t
    fi

    for ((i = 0; i < 4; i++)); do
      AES_round_keys[cur_expanded_key_bytes]=$(( t[i] ^ AES_round_keys[cur_expanded_key_bytes-AES_key_bytes] ))
      ((cur_expanded_key_bytes++))
    done

  done
}

################################################################
####################### BEGIN ##################################
################################################################

export LC_ALL=C

# default values
AES_mode=cbc
AES_encrypt=1
AES_output_format=raw
hex_key=
hex_iv=
AES_key_bits=0
expand_key_only=0

while getopts ":K:I:m:b:o:dxh" opt; do
  case $opt in
    K)
      hex_key=$OPTARG
      ;;
    I)
      hex_iv=$OPTARG
      ;;
    m)
      AES_mode=$OPTARG
      ;;
    b)
      AES_key_bits=$OPTARG
      ;;
    o)
      AES_output_format=$OPTARG
      ;;
    d)
      AES_encrypt=0
      ;;
    x)
      expand_key_only=1
      ;;
    h)
      AES_show_help
      exit
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

# sanity checks
if [[ ! "$AES_output_format" =~ ^(hex|raw|base64)$ ]]; then
  AES_die "Invalid output format '$AES_output_format', terminating"
else
  AES_output_function=AES_output_${AES_output_format}
fi

if [[ ! "$AES_mode" =~ ^(ecb|cbc|cfb|ofb|ctr)$ ]]; then
  AES_die "Invalid mode '$AES_mode', terminating"
fi

if [[ ! "$AES_key_bits" =~ ^(0|128|192|256) ]]; then
  AES_die "Invalid key bits $AES_key_bits"
fi

if [ "$hex_key" = "" ]; then
  AES_die "Must specify hex key (-K)"
else
  hex_key=${hex_key,,?}
  # check that key is a valid length
  if [ $(( ${#hex_key} % 2 )) -ne 0 ] || [[ ! "${hex_key}" =~ ^[0-9a-f]+$ ]]; then
    AES_die "Hex key must be an even number of hex chars (0-9a-f)"
  fi
fi

# prepare key and stuff
AES_init "$hex_key"

if [ $expand_key_only -eq 1 ]; then
  AES_print_expanded_key
  exit
fi

# if we get here, we're doing real work. Check that neither stdin nor stdout (raw
# mode only) is connected to terminal
if [ -t 0 ]; then
  AES_die "No input (stdin)"
fi

if [ "$AES_output_format" = "raw" ] && [ -t 1 ]; then
  AES_die "Won't write raw bytes to terminal, if you really want to do it pipe to cat, or switch to hex or base64 output"
fi

# sanity checks on IV, if needed
if [ "$AES_mode" != "ecb" ]; then
  if [ "$hex_iv" = "" ]; then
    AES_die "Must specify IV"
  else
    hex_iv=${hex_iv,,?}
    # check that iv is a valid length
    if [ $(( ${#hex_iv} % 2 )) -ne 0 ] || [[ ! "${hex_iv}" =~ ^[0-9a-f]+$ ]]; then
      AES_die "Hex IV must be an even number of hex chars (0-9a-f)"
    fi
  fi

  # IV must always be 16 bytes
  iv_bits=$(( (${#hex_iv} / 2) * 8 ))
  iv_bytes=$(( iv_bits / 8 ))

  if [ $iv_bits -ne 128 ]; then
    AES_log "Warning: forcing IV to 128 bits"
    hex_iv="${hex_iv}00000000000000000000000000000000"
    hex_iv=${hex_iv:0:32}
  fi

  AES_create_iv_or_key "$hex_iv" AES_iv
fi

if [ $AES_encrypt -eq 1 ]; then
  $AES_pre_encrypt_function
  $AES_encrypt_function
else
  $AES_pre_decrypt_function
  $AES_decrypt_function
fi

exit

